<?php

namespace Talm\Database;

class Database implements \Anax\Common\ConfigureInterface, \Anax\Common\AppInjectableInterface
{
    use \Anax\Common\ConfigureTrait;
    use \Anax\Common\AppInjectableTrait;

    private $db;

    public function connect()
    {
        try {
            $this->db = new \PDO(
                $this->config['dsn'],
                $this->config['username'],
                $this->config['password'],
                $this->config['driver_options']
            );

            $this->db->setAttribute(\PDO::ATTR_DEFAULT_FETCH_MODE, $this->config['fetch_mode']);
        } catch (\PDOException $e) {
            throw new Exception("Failed to connect to database, hiding details.");
        }
    }

    public function exists($uname)
    {
        $stmt = $this->db->prepare("SELECT * FROM users WHERE username='$uname'");
        $stmt->execute();
        $res = $stmt->fetch(\PDO::FETCH_ASSOC);

        return $res ? true : false;
    }

    public function addUser($uname, $pass, $type = "user")
    {
        $stmt = $this->db->prepare("INSERT INTO users VALUES ($uname, $pass, $type)");
        $stmt->execute();
    }

    public function getHash($uname)
    {
        $stmt = $this->db->prepare("SELECT password FROM users WHERE username='$uname'");
        $stmt->execute();
        $res = $stmt->fetch();

        return $res->password;
    }

    public function changePassword($uname, $pass)
    {
        $stmt = $this->db->prepare("UPDATE users SET password='$pass' WHERE username='$uname'");
        $stmt->execute();
    }

    public function getInfo($uname)
    {
        $stmt = $this->db->prepare("SELECT info FROM users WHERE username='$uname'");
        $stmt->execute();
        $res = $stmt->fetch();

        return $res->info;
    }

    public function changeInfo($uname, $info)
    {
        $stmt = $this->db->prepare("UPDATE users SET info='$info' WHERE username='$uname'");
        $stmt->execute();
    }

    public function getType($uname)
    {
        $stmt = $this->db->prepare("SELECT type FROM users WHERE username='$uname'");
        $stmt->execute();
        $res = $stmt->fetch();

        return $res->type;
    }

    public function getAll()
    {
        $stmt = $this->db->prepare("SELECT * FROM users");
        $stmt->execute();
        $res = $stmt->fetchAll();

        return $res;
    }

    /**
     * Do SELECT with optional parameters and return a resultset.
     *
     * @param string $sql   statement to execute
     * @param array  $param to match ? in statement
     *
     * @return array with resultset
     */
    public function executeFetchAll($sql, $param = [])
    {
        $sth = $this->execute($sql, $param);
        $res = $sth->fetchAll();
        if ($res === false) {
            $this->statementException($sth, $sql, $param);
        }
        return $res;
    }

    /**
     * Do INSERT/UPDATE/DELETE with optional parameters.
     *
     * @param string $sql   statement to execute
     * @param array  $param to match ? in statement
     *
     * @return PDOStatement
     */
    public function execute($sql, $param = [])
    {
        $sth = $this->db->prepare($sql);
        if (!$sth) {
            $this->statementException($sth, $sql, $param);
        }

        $status = $sth->execute($param);
        if (!$status) {
            $this->statementException($sth, $sql, $param);
        }

        return $sth;
    }

    /**
     * Return last insert id from an INSERT.
     *
     * @return void
     */
    public function lastInsertId()
    {
        return $this->db->lastInsertId();
    }

    /**
     * Through exception with detailed message.
     *
     * @param PDOStatement $sth statement with error
     * @param string       $sql     statement to execute
     * @param array        $param   to match ? in statement
     *
     * @return void
     *
     * @throws Exception
     */
    public function statementException($sth, $sql, $param)
    {
        throw new \Exception(
            $sth->errorInfo()[2]
            . "<br><br>SQL ("
            . substr_count($sql, "?")
            . " params):<br><pre>$sql</pre><br>PARAMS ("
            . count($param)
            . "):<br><pre>"
            . implode($param, "\n")
            . "</pre>"
            . ((count(array_filter(array_keys($param), 'is_string')) > 0)
                ? "WARNING your params array has keys, should only have values."
                : null)
        );
    }
}

